{"version":3,"sources":["logo.svg","TarotMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TarotMachine","renderCard","state","card","number","image","upright","oracle","name","element","kabbalitic_letter","numerology","meaning_kabbalistic_letter","planetary_correspondence","animals","stone","explanation","className","onClick","initCardClick","hideCardClick","showCardClick","href","isFlipped","flipDirection","src","alt","id","reversed","hasCard","bind","e","preventDefault","fetch","then","response","json","data","console","log","cards","setState","this","prevState","random","Math","floor","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0081b7e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, Fragment } from 'react';\r\nimport ReactCardFlip from \"react-card-flip\";     \r\n\r\n\r\nclass TarotMachine extends Component{\r\n    constructor(){\r\n        super();\r\n        \r\n        this.state = {\r\n            card: {\r\n            number: \"Este tarot possui 22 que correspondem aos Arcanos Maiores. As cartas deste baralho foram criadas pelo místico e ocultista inglês Arthur Edward Waite (02.10.1857 – 19.05.1942) e ilustradas por Pamela Colman Smith (16.02.1878 – 18.09.1951). \",\r\n            image: \"assets/front-tarot.svg\",\r\n            upright:\"Possui a energia predominante da carta quando ela está virada para cima\",            \r\n            oracle:\"Traz concelhos do oráculo para aplicar na vida prática. Nesta sessão você entenderá o caminho que deve seguir\",\r\n            reversed:\"?\",\r\n            name:\"\",    \r\n            element:\"Traz informações a respeito dos 4 elementos de cada carta: água, fogo, terra e ar\",\r\n            kabbalitic_letter:\"As cartas possuiem uma letra cabalistica\",\r\n            meaning_kabbalistic_letter:\"As cartas possuem um significado cabalistico para sua respectiva letra\", \r\n            numerology:\"As cartas possuem um significado numerico. Nesta sessão você entenderar o que os número da carta podem revelar\",          \r\n            planetary_correspondence:\"Possuiem um signo ou uma correspondencia planetária\",\r\n            animals:\"Dispõe de um animal que a representa\",\r\n            stone:\"Compreende uma pedra que a representa\",\r\n            explanation:\"Traz consigo a explicação simbólica ou arquétipos dentro do imaginário das cartas\"\r\n        \r\n          \r\n           \r\n            },   \r\n            isFlipped: false,  \r\n            hasCard: false\r\n        }\r\n        this.hideCardClick = this.hideCardClick.bind(this);\r\n        this.showCardClick =  this.showCardClick.bind(this);\r\n        this.initCardClick = this.initCardClick.bind(this);\r\n        \r\n    }\r\n    \r\n    \r\n        \r\n    initCardClick(e) {\r\n        \r\n        e.preventDefault(             \r\n            fetch('./tarot.json')\r\n            .then(response => response.json())\r\n            .then(data =>{\r\n                console.log(data);\r\n                 let { card } = this.state;                                              \r\n                 card.number = data.cards[22].number;\r\n                 card.image = data.cards[22].image;\r\n                 card.upright = data.cards[22].upright;\r\n                 card.oracle = data.cards[22].oracle;\r\n                 card.number = data.cards[22].number;   \r\n                 card.name = data.cards[22].name;\r\n                 card.element = data.cards[22].element;\r\n                 card.kabbalitic_letter = data.cards[22].kabbalitic_letter;\r\n                 card.meaning_kabbalistic_letter = data.cards[22].meaning_kabbalistic_letter;\r\n                 card.numerology= data.cards[22].numerology;\r\n                 card.planetary_correspondence = data.cards[22].planetary_correspondence;\r\n                 card.animals = data.cards[22].animals;\r\n                 card.stone = data.cards[22].stone;\r\n                 card.explanation = data.cards[22].explanation;\r\n                 this.setState({card}, ()=> {\r\n                    if (this.state.hasCard === false){\r\n                        this.setState({hasCard: true})\r\n                    }\r\n                 })\r\n                \r\n            })\r\n        \r\n\r\n        );\r\n      \r\n    }\r\n\r\n\r\n\r\n   \r\n\r\n    hideCardClick(e) {\r\n        \r\n        e.preventDefault(         \r\n            fetch('./tarot.json')\r\n            .then(response => response.json())\r\n            .then(data =>{\r\n                console.log(data);\r\n                 let { card } = this.state;               \r\n                 card.number = data.cards[23].number;\r\n                 card.image = data.cards[23].image;\r\n                 card.upright = data.cards[23].upright;\r\n                 card.oracle = data.cards[23].oracle;\r\n                 card.name = data.cards[23].name;\r\n                 card.element = data.cards[23].element;\r\n                 card.kabbalitic_letter = data.cards[23].kabbalitic_letter;\r\n                 card.meaning_kabbalistic_letter = data.cards[23].meaning_kabbalistic_letter;\r\n                 card.numerology= data.cards[23].numerology;\r\n                 card.planetary_correspondence = data.cards[23].planetary_correspondence;\r\n                 card.animals = data.cards[23].animals;\r\n                 card.stone = data.cards[23].stone;\r\n                 card.explanation = data.cards[23].explanation;\r\n                 this.setState({card}, ()=> {\r\n                    if (this.state.hasCard === false){\r\n                        this.setState({hasCard: true})\r\n                    }\r\n                 })\r\n                \r\n            })\r\n        \r\n\r\n        );\r\n        this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n    }\r\n\r\n\r\n    \r\n    showCardClick(e) {\r\n        e.preventDefault(          \r\n            fetch('./tarot.json')\r\n            .then(response => response.json())\r\n            .then(data =>{\r\n                console.log(data);\r\n                 let { card } = this.state; \r\n                 let random;        \r\n                 random = Math.floor((Math.random() * 22) + 0);\r\n                 card.number = data.cards[random].number;\r\n                 card.image = data.cards[random].image;\r\n                 card.upright = data.cards[random].upright;\r\n                 card.oracle = data.cards[random].oracle;\r\n                 card.number = data.cards[random]. number;   \r\n                 card.name = data.cards[random].name;\r\n                 card.element = data.cards[random].element;\r\n                 card.kabbalitic_letter = data.cards[random].kabbalitic_letter;\r\n                 card.meaning_kabbalistic_letter = data.cards[random].meaning_kabbalistic_letter;\r\n                 card.numerology= data.cards[random].numerology;\r\n                 card.planetary_correspondence = data.cards[random].planetary_correspondence;\r\n                 card.animals = data.cards[random].animals;\r\n                 card.stone = data.cards[random].stone;\r\n                 card.explanation = data.cards[random].explanation;\r\n                 this.setState({card}, ()=> {\r\n                    if (this.state.hasCard === false){\r\n                        this.setState({hasCard: true})\r\n                    }\r\n                 })\r\n                \r\n            })\r\n        \r\n\r\n        );\r\n        this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    renderCard = () => {\r\n        const { \r\n            number, \r\n            image, \r\n            upright, \r\n            oracle,\r\n            name, \r\n            element, \r\n            kabbalitic_letter, \r\n            meaning_kabbalistic_letter,\r\n            numerology,\r\n            planetary_correspondence,\r\n            animals,\r\n            stone,\r\n            explanation } = this.state.card;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div className=\"col col-lg-5 mb-n5\"><br/>  \r\n               \r\n                                        \r\n                        <nav className=\"navbar navbar-default\">\r\n                            <div className=\"container-fluid\">\r\n                                    <div className=\"navbar-header fixed-top menu-bar \">\r\n                                        <button onClick={this.initCardClick}><i className=\"fas fa-dungeon \"></i><br/>Início</button>   \r\n                                        <button onClick={this.hideCardClick}><i className=\"fas fa-hand-sparkles\"></i><br/>Embaralhar</button>               \r\n                                        <button onClick={this.showCardClick}><i className=\"fas fa-eye\"></i><br/><a className=\"text-magic-link\" href=\"#revelar\">Revelar</a></button>                   \r\n                                        <button href=\"#magia\"><i className=\"fas fa-hat-wizard\"></i><br/><a className=\"text-magic-link\" href=\"#magia\">Magia</a></button>                      \r\n                                    </div>                \r\n                                </div>\r\n                        </nav>               \r\n                        \r\n                        <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"vertical\">\r\n                      \r\n                            <div>\r\n                                \r\n                                <img src={image} className=\"card-img-top mt-3\"></img>  \r\n                             \r\n                                            \r\n                            </div>\r\n                            \r\n                    \r\n                            <div>\r\n                                <br/>\r\n                               \r\n                            <img src={image} alt=\"card\" className=\"card-img-top mt-3\"></img>   \r\n                              \r\n                              \r\n                            </div>\r\n                        </ReactCardFlip> \r\n                       \r\n                         <section id=\"magia\">  \r\n                         <br/>\r\n                         <br/>       \r\n                        <div className='card mt-2'id=\"//#endregion magia\" >     \r\n                                                                                     \r\n                            <ul className=\"list-group list-group-flush shadow\">                               \r\n                                <li className=\"list-group-item\"><h5 className=\"card-title\">{name} {number} </h5></li>   \r\n                                <li className=\"list-group-item\"><span>Energia</span><br/>{upright}</li>   \r\n                                <li className=\"list-group-item\"><span>Oráculo</span><br/><p className=\"text-justify\">{oracle}</p></li>  \r\n                                <li className=\"list-group-item\"><span>Numerologia</span><br/><p className=\"text-justify\">{numerology}</p></li>                                                                                            \r\n                                <li className=\"list-group-item\"><span>Simbolismo</span><br/><p className=\"text-justify\">{explanation}</p></li>            \r\n                                <li className=\"list-group-item\"><span>Elemento</span><br/>{element}</li>\r\n                                <li className=\"list-group-item\"><span>Letra</span><br/>{kabbalitic_letter}</li>                               \r\n                                <li className=\"list-group-item\"><span>Planeta</span><br/>{planetary_correspondence}</li>\r\n                                <li className=\"list-group-item\"><span>Animal</span><br/>{animals}</li>\r\n                                <li className=\"list-group-item\"><span>Pedra</span><br/>{stone}</li>                        \r\n                            </ul>         \r\n                        </div>          \r\n                        <div className=\"card-body\"><a href=\"https://freecodecamp.org/iurycoelho\" className=\"card-link\"><i className=\"fab fa-free-code-camp fa-2x\"></i></a></div>\r\n                        </section>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>     \r\n            \r\n            \r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Fragment>                           \r\n                {this.renderCard() }  \r\n                {this.hasCard === true}              \r\n            </Fragment>        \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default TarotMachine;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TarotMachine from './TarotMachine.jsx';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TarotMachine />           \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}